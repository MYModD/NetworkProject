# FPS協力防衛ゲーム開発スケジュール

## 📊 進行状況サマリー
**全体進捗**: 45% | **現在フェーズ**: フェーズ2 | **遅延**: 2週間

## フェーズ1: 基盤システム構築 (完了) ✅

### Week 1: コアアーキテクチャ 【完了率: 85%】
- [x] ~~VContainerによるDI設定~~ → ⚠️ **未実装（技術負債）**
- [x] R3によるリアクティブシステム基盤 ✅
- [x] ~~UniTaskによる非同期処理基盤~~ → ⚠️ **未活用（技術負債）**
- [x] 基本的なシーン構成とナビゲーション ✅

### Week 2: ネットワーク基盤 【完了率: 90%】
- [x] Photon Fusion2のセットアップ ✅
- [x] ルーム作成・参加システム ✅
- [x] プレイヤー同期の基本実装 ✅
- [x] ネットワーク状態管理 ✅

### Week 3: プレイヤーシステム 【完了率: 75%】
- [x] FPS視点カメラシステム ✅
- [x] ~~基本移動・ジャンプ機能~~ → 🔄 **移動完了、ジャンプ未完成**
- [x] 入力システム（InputManager拡張） ✅
- [x] プレイヤーアバター同期 ✅

## フェーズ2: ゲームプレイ実装 (進行中) 🔄

### Week 4: 戦艦環境構築 【完了率: 40%】
- [x] ~~戦艦内マップデザイン~~ → ⚠️ **未完成**
- [x] インタラクト可能オブジェクト配置 ✅
- [ ] ナビゲーションシステム → ⚠️ **未実装**
- [x] 環境ライティング（HDRP最適化） ✅

### Week 5: 砲台システム 【完了率: 10%】
- [ ] 砲台操縦インターフェース → 🔥 **最優先**
- [ ] 射撃システム実装 → 🔥 **最優先**
- [ ] 弾道計算・物理演算 → 🔥 **最優先**
- [ ] エフェクト・サウンド統合

### Week 6: 防御システム 【完了率: 5%】
- [ ] シールド展開機能 → 🔥 **最優先**
- [ ] 防御システム操作UI
- [ ] 耐久値・ダメージシステム → 🔥 **最優先**
- [ ] 修理・メンテナンス機能

### Week 7: 敵システム基盤 【完了率: 0%】
- [ ] 敵AI基本実装 → 🔥 **最優先・緊急**
- [ ] ウェーブシステム設計 → 🔥 **最優先・緊急**
- [ ] 敵の攻撃パターン → 🔥 **最優先・緊急**
- [ ] 戦艦へのダメージ判定 → 🔥 **最優先・緊急**

## フェーズ3: ゲームシステム完成 (未着手) ❌

### Week 8: ウェーブシステム 【完了率: 0%】
- [ ] ウェーブ進行管理 → 📅 **フェーズ2から移動**
- [ ] 難易度調整システム
- [ ] ボス敵実装
- [ ] クリア条件・失敗条件

### Week 9: 強化・アップグレード 【完了率: 0%】
- [ ] ウェーブ間強化フェーズ
- [ ] 装備アップグレードシステム
- [ ] スキル向上要素
- [ ] プレイヤー進行保存

### Week 10: 協力システム強化 【完了率: 0%】
- [ ] 役割分担システム
- [ ] チーム連携機能
- [ ] コミュニケーションツール
- [ ] 協力プレイ最適化

## フェーズ4: 最適化・完成 (未着手) ❌

### Week 11: パフォーマンス最適化 【完了率: 0%】
- [ ] ネットワーク最適化
- [ ] レンダリング最適化（HDRP）
- [ ] メモリ使用量最適化
- [ ] フレームレート安定化

### Week 12: 最終調整・テスト 【完了率: 0%】
- [ ] バランス調整
- [ ] バグ修正・安定性向上
- [ ] ユーザビリティ改善
- [ ] 最終テスト・デバッグ

## 🚨 緊急対応計画

### 即座に取り組むべき最優先タスク
1. **🔥 Week 5-7の集中実装** (2週間で完了目標)
   - 敵システム基本実装
   - 簡易ウェーブシステム
   - 砲台操作・射撃システム
   - ダメージ判定システム

2. **⚠️ 技術負債の解消** (並行実装)
   - VContainer導入とDI設定
   - UniTask活用によるパフォーマンス向上
   - ジャンプ・物理演算機能完成

### 📅 修正スケジュール (今後6週間)

#### **Week 現在+1: 緊急ゲームコア実装**
- [ ] 敵オブジェクト基本クラス作成
- [ ] 簡易AI（追跡・攻撃）実装
- [ ] ダメージシステム基盤
- [ ] 砲台操作インターフェース

#### **Week 現在+2: 戦闘システム統合**
- [ ] 射撃システム実装
- [ ] 弾道計算・コライダー判定
- [ ] 敵・プレイヤー間ダメージ処理
- [ ] 簡易ウェーブスポーンシステム

#### **Week 現在+3: ゲームループ完成**
- [ ] ウェーブ進行管理
- [ ] クリア・失敗条件
- [ ] シールド・防御システム
- [ ] 基本的なゲームバランス調整

## 💡 実装戦略

### 最小実装方針 (MVP: Minimum Viable Product)
1. **敵**: 基本的な追跡・攻撃AI
2. **砲台**: 照準・射撃・ダメージ
3. **ウェーブ**: 敵スポーン・進行管理
4. **防御**: HPシステム・シールド基本機能

### 段階的拡張
- フェーズ2完了後にフェーズ3へ
- 基本機能確立後に高度な機能追加
- テストプレイによる継続的改善

## 開発指針

### 毎日のタスク管理
1. **朝**: 前日の進捗確認、当日目標設定
2. **開発中**: 既存コードの設計・記法を参考にした実装
3. **夕方**: 進捗確認、翌日の準備

### コード品質管理
- var型の使用禁止
- 適切な粒度でのメソッド分割
- リーダブルコードの原則適用
- 各行への意図・背景コメント記述
- 関数へのsummary記述

### 技術スタック活用
- **R3**: UI更新、ゲーム状態管理
- **VContainer**: 依存性注入、システム分離 ⚠️ **要実装**
- **UniTask**: 非同期処理、パフォーマンス向上 ⚠️ **要活用**
- **HDRP**: 高品質レンダリング ✅
- **Photon Fusion2**: リアルタイムマルチプレイヤー ✅

### 📊 進捗追跡指標
各週末に以下を評価：
- **機能完成度**: 計画vs実績の数値比較
- **プレイアブル度**: 実際にゲームとして動作するか
- **技術品質**: コード品質とパフォーマンス
- **チーム連携**: マルチプレイヤー動作の安定性

### 🔥 リスク対策
- **スケジュール遅延**: 機能の優先順位明確化、MVP重視
- **技術的複雑性**: 段階的実装、早期テスト
- **ネットワーク同期**: Photon Fusion2のベストプラクティス遵守
- **品質保証**: 継続的なデバッグとテストプレイ
description:
globs:
alwaysApply: false
---
